diff --git a/Makefile b/Makefile
index 09d790c..92f8a77 100644
--- a/Makefile
+++ b/Makefile
@@ -71,12 +71,19 @@ QEMU = $(shell if which qemu > /dev/null; \
 	echo "***" 1>&2; exit 1)
 endif
 
+#can be defined deferntly when running make from console - will create a kernel with different schdualing policy
+ifndef SCHEDFLAG
+SCHEDFLAG := DEFAULT
+endif
+
+
 CC = $(TOOLPREFIX)gcc
 AS = $(TOOLPREFIX)gas
 LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
+CFLAGS += -D $(SCHEDFLAG)
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
 # FreeBSD ld wants ``elf_i386_fbsd''
@@ -181,6 +188,8 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_sanity\
+	_SMLsanity\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -248,7 +257,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c sanity.c SMLsanity.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
diff --git a/SMLsanity.c b/SMLsanity.c
new file mode 100644
index 0000000..b711b61
--- /dev/null
+++ b/SMLsanity.c
@@ -0,0 +1,66 @@
+#include "types.h"
+#include "user.h"
+
+
+int
+main(int argc, char *argv[])
+{
+	
+	int i;
+	int n=21;
+	//int j ;
+	//int k;
+	int ctime;
+	int retime;
+	int rutime;
+	int stime;
+	//n = atoi(argv[1]);
+	//i = n; //unimportant
+	int pid;
+	for (i = 0; i < n; i++) {
+		//j = i % 3;
+		pid = fork();
+		if (pid == 0) {//child
+			int val = getpid(); // ensures independence from the first son's pid when gathering the results in the second part of the program
+			val = (val-4)%3;
+#ifdef SML
+			switch (val) {
+			case 0:
+				set_prio(1);
+				break;
+			case 1:
+				set_prio(2);
+				break;
+			case 2:
+				set_prio(3);
+				break;
+			}
+			
+#endif
+			
+			exit(); // children exit here
+		}
+		continue; // father continues to spawn the next child
+	}
+	for (i = 0; i < n; i++) {
+		pid = wait2(&retime, &rutime, &stime);
+		ctime = getctime();
+		int res = (pid - 4) % 3; // correlates to j in the dispatching loop
+		switch (res) {
+		case 0: // CPU bound processes
+			printf(1, "Priority 1, pid: %d, termination time: %d\n", pid, ctime + retime + rutime + stime);
+			
+			break;
+		case 1: // CPU bound processes, short tasks
+			printf(1, "Priority 2, pid: %d, termination time: %d\n", pid, ctime + retime + rutime + stime);
+			
+			break;
+		case 2: // simulating I/O bound processes
+			printf(1, "Priority 3, pid: %d, termination time: %d\n", pid, ctime + retime + rutime + stime);
+			
+			break;
+		}
+	}
+	
+	exit();
+}
\ No newline at end of file
diff --git a/defs.h b/defs.h
index 82fb982..689214c 100644
--- a/defs.h
+++ b/defs.h
@@ -119,7 +119,9 @@ void            sleep(void*, struct spinlock*);
 void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
+int             wait2(int*, int*, int*);
 void            yield(void);
+int             set_prio(int);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/exec.c b/exec.c
index b40134f..10516de 100644
--- a/exec.c
+++ b/exec.c
@@ -12,7 +12,7 @@ exec(char *path, char **argv)
 {
   char *s, *last;
   int i, off;
-  uint argc, sz, sp, ustack[3+MAXARG+1];
+  uint argc, sz, sp, ustack[3 + MAXARG + 1];
   struct elfhdr elf;
   struct inode *ip;
   struct proghdr ph;
@@ -21,7 +21,7 @@ exec(char *path, char **argv)
 
   begin_op();
 
-  if((ip = namei(path)) == 0){
+  if ((ip = namei(path)) == 0) {
     end_op();
     cprintf("exec: fail\n");
     return -1;
@@ -30,30 +30,30 @@ exec(char *path, char **argv)
   pgdir = 0;
 
   // Check ELF header
-  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
+  if (readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
     goto bad;
-  if(elf.magic != ELF_MAGIC)
+  if (elf.magic != ELF_MAGIC)
     goto bad;
 
-  if((pgdir = setupkvm()) == 0)
+  if ((pgdir = setupkvm()) == 0)
     goto bad;
 
   // Load program into memory.
   sz = 0;
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
+  for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
+    if (readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
       goto bad;
-    if(ph.type != ELF_PROG_LOAD)
+    if (ph.type != ELF_PROG_LOAD)
       continue;
-    if(ph.memsz < ph.filesz)
+    if (ph.memsz < ph.filesz)
       goto bad;
-    if(ph.vaddr + ph.memsz < ph.vaddr)
+    if (ph.vaddr + ph.memsz < ph.vaddr)
       goto bad;
-    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+    if ((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
       goto bad;
-    if(ph.vaddr % PGSIZE != 0)
+    if (ph.vaddr % PGSIZE != 0)
       goto bad;
-    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+    if (loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
       goto bad;
   }
   iunlockput(ip);
@@ -63,34 +63,34 @@ exec(char *path, char **argv)
   // Allocate two pages at the next page boundary.
   // Make the first inaccessible.  Use the second as the user stack.
   sz = PGROUNDUP(sz);
-  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+  if ((sz = allocuvm(pgdir, sz, sz + 2 * PGSIZE)) == 0)
     goto bad;
-  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+  clearpteu(pgdir, (char*)(sz - 2 * PGSIZE));
   sp = sz;
 
   // Push argument strings, prepare rest of stack in ustack.
-  for(argc = 0; argv[argc]; argc++) {
-    if(argc >= MAXARG)
+  for (argc = 0; argv[argc]; argc++) {
+    if (argc >= MAXARG)
       goto bad;
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
-    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+    if (copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
       goto bad;
-    ustack[3+argc] = sp;
+    ustack[3 + argc] = sp;
   }
-  ustack[3+argc] = 0;
+  ustack[3 + argc] = 0;
 
   ustack[0] = 0xffffffff;  // fake return PC
   ustack[1] = argc;
-  ustack[2] = sp - (argc+1)*4;  // argv pointer
+  ustack[2] = sp - (argc + 1) * 4; // argv pointer
 
-  sp -= (3+argc+1) * 4;
-  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+  sp -= (3 + argc + 1) * 4;
+  if (copyout(pgdir, sp, ustack, (3 + argc + 1) * 4) < 0)
     goto bad;
 
   // Save program name for debugging.
-  for(last=s=path; *s; s++)
-    if(*s == '/')
-      last = s+1;
+  for (last = s = path; *s; s++)
+    if (*s == '/')
+      last = s + 1;
   safestrcpy(curproc->name, last, sizeof(curproc->name));
 
   // Commit to the user image.
@@ -99,14 +99,17 @@ exec(char *path, char **argv)
   curproc->sz = sz;
   curproc->tf->eip = elf.entry;  // main
   curproc->tf->esp = sp;
+#ifdef DML
+  proc->priority = 2;
+#endif
   switchuvm(curproc);
   freevm(oldpgdir);
   return 0;
 
- bad:
-  if(pgdir)
+bad:
+  if (pgdir)
     freevm(pgdir);
-  if(ip){
+  if (ip) {
     iunlockput(ip);
     end_op();
   }
diff --git a/param.h b/param.h
index a7e90ef..203fa13 100644
--- a/param.h
+++ b/param.h
@@ -11,4 +11,4 @@
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
-
+#define QUANTA 		 5 //process preemption will be done every quanta size (measured inclock ticks) 
diff --git a/proc.c b/proc.c
index 806b1b1..ddaafd8 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#define NULL 0
 
 struct {
   struct spinlock lock;
@@ -29,7 +30,7 @@ pinit(void)
 // Must be called with interrupts disabled
 int
 cpuid() {
-  return mycpu()-cpus;
+  return mycpu() - cpus;
 }
 
 // Must be called with interrupts disabled to avoid the caller being
@@ -38,10 +39,10 @@ struct cpu*
 mycpu(void)
 {
   int apicid, i;
-  
-  if(readeflags()&FL_IF)
+
+  if (readeflags()&FL_IF)
     panic("mycpu called with interrupts enabled\n");
-  
+
   apicid = lapicid();
   // APIC IDs are not guaranteed to be contiguous. Maybe we should have
   // a reverse map, or reserve a register to store &cpus[i].
@@ -78,8 +79,8 @@ allocproc(void)
 
   acquire(&ptable.lock);
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == UNUSED)
       goto found;
 
   release(&ptable.lock);
@@ -88,18 +89,22 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->ctime = ticks;
+  p->retime = 0;
+  p->rutime = 0;
+  p->stime = 0;
 
   release(&ptable.lock);
 
   // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
+  if ((p->kstack = kalloc()) == 0) {
     p->state = UNUSED;
     return 0;
   }
   sp = p->kstack + KSTACKSIZE;
 
   // Leave room for trap frame.
-  sp -= sizeof *p->tf;
+  sp -= sizeof * p->tf;
   p->tf = (struct trapframe*)sp;
 
   // Set up new context to start executing at forkret,
@@ -107,9 +112,9 @@ found:
   sp -= 4;
   *(uint*)sp = (uint)trapret;
 
-  sp -= sizeof *p->context;
+  sp -= sizeof * p->context;
   p->context = (struct context*)sp;
-  memset(p->context, 0, sizeof *p->context);
+  memset(p->context, 0, sizeof * p->context);
   p->context->eip = (uint)forkret;
 
   return p;
@@ -124,12 +129,14 @@ userinit(void)
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
   p = allocproc();
-  
+
   initproc = p;
-  if((p->pgdir = setupkvm()) == 0)
+  if ((p->pgdir = setupkvm()) == 0)
     panic("userinit: out of memory?");
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
   p->sz = PGSIZE;
+  p->ctime = ticks;
+  p->priority = 2;
   memset(p->tf, 0, sizeof(*p->tf));
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
@@ -162,11 +169,11 @@ growproc(int n)
   struct proc *curproc = myproc();
 
   sz = curproc->sz;
-  if(n > 0){
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  if (n > 0) {
+    if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
-  } else if(n < 0){
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  } else if (n < 0) {
+    if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
   }
   curproc->sz = sz;
@@ -185,12 +192,12 @@ fork(void)
   struct proc *curproc = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0) {
     return -1;
   }
 
   // Copy process state from proc.
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+  if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0) {
     kfree(np->kstack);
     np->kstack = 0;
     np->state = UNUSED;
@@ -202,9 +209,9 @@ fork(void)
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
-
-  for(i = 0; i < NOFILE; i++)
-    if(curproc->ofile[i])
+  np->priority = curproc->priority;
+  for (i = 0; i < NOFILE; i++)
+    if (curproc->ofile[i])
       np->ofile[i] = filedup(curproc->ofile[i]);
   np->cwd = idup(curproc->cwd);
 
@@ -231,12 +238,12 @@ exit(void)
   struct proc *p;
   int fd;
 
-  if(curproc == initproc)
+  if (curproc == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
+  for (fd = 0; fd < NOFILE; fd++) {
+    if (curproc->ofile[fd]) {
       fileclose(curproc->ofile[fd]);
       curproc->ofile[fd] = 0;
     }
@@ -253,10 +260,10 @@ exit(void)
   wakeup1(curproc->parent);
 
   // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+    if (p->parent == curproc) {
       p->parent = initproc;
-      if(p->state == ZOMBIE)
+      if (p->state == ZOMBIE)
         wakeup1(initproc);
     }
   }
@@ -275,16 +282,16 @@ wait(void)
   struct proc *p;
   int havekids, pid;
   struct proc *curproc = myproc();
-  
+
   acquire(&ptable.lock);
-  for(;;){
+  for (;;) {
     // Scan through table looking for exited children.
     havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+      if (p->parent != curproc)
         continue;
       havekids = 1;
-      if(p->state == ZOMBIE){
+      if (p->state == ZOMBIE) {
         // Found one.
         pid = p->pid;
         kfree(p->kstack);
@@ -301,7 +308,7 @@ wait(void)
     }
 
     // No point waiting if we don't have any children.
-    if(!havekids || curproc->killed){
+    if (!havekids || curproc->killed) {
       release(&ptable.lock);
       return -1;
     }
@@ -310,6 +317,107 @@ wait(void)
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
   }
 }
+int wait2(int *retime, int *rutime, int *stime) {
+  struct proc *p;
+  int havekids, pid;
+  acquire(&ptable.lock);
+  for (;;) {
+    struct proc *proc = myproc();
+    // Scan through table looking for zombie children.
+    havekids = 0;
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+      if (p->parent != proc)
+        continue;
+      havekids = 1;
+      if (p->state == ZOMBIE) {
+        // Found one.
+        *retime = p->retime;
+        *rutime = p->rutime;
+        *stime = p->stime;
+        pid = p->pid;
+        kfree(p->kstack);
+        p->kstack = 0;
+        freevm(p->pgdir);
+        p->state = UNUSED;
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        p->ctime = 0;
+        p->retime = 0;
+        p->rutime = 0;
+        p->stime = 0;
+        p->priority = 0;
+        release(&ptable.lock);
+        return pid;
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if (!havekids || proc->killed) {
+      release(&ptable.lock);
+      return -1;
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(proc, &ptable.lock);  //DOC: wait-sleep
+  }
+}
+
+#ifdef SML
+/*
+  this method will find the next process to run
+*/
+struct proc* findreadyprocess(int *index, uint *priority) {
+  int i;
+  struct proc* proc2;
+notfound:
+  for (i = 0; i < NPROC; i++) {
+    proc2 = &ptable.proc[(*index + i) % NPROC];
+    if (proc2->state == RUNNABLE && proc2->priority == *priority) {
+      *index = (*index + 1) % NPROC;
+      return proc2; // found a runnable process with appropriate priority
+    }
+  }
+  if (*priority == 1) {//did not find any process on any of the prorities
+    *priority = 3;
+    return 0;
+  }
+  else {
+    *priority -= 1; //will try to find a process at a lower priority
+    goto notfound;
+  }
+  return 0;
+}
+#endif
+
+#ifdef DML
+/*
+  this method will find the next process to run
+*/
+struct proc* findreadyprocess(int *index, uint *priority) {
+  int i;
+  struct proc* proc2;
+notfound:
+  for (i = 0; i < NPROC; i++) {
+    proc2 = &ptable.proc[(*index + i) % NPROC];
+    if (proc2->state == RUNNABLE && proc2->priority == *priority) {
+      *index = (*index + 1 + i) % NPROC;
+      return proc2; // found a runnable process with appropriate priority
+    }
+  }
+  if (*priority == 1) {//did not find any process on any of the prorities
+    *priority = 3;
+    return 0;
+  }
+  else {
+    *priority -= 1; //will try to find a process at a lower priority
+    goto notfound;
+  }
+  return 0;
+}
+#endif
+
 
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
@@ -323,26 +431,40 @@ void
 scheduler(void)
 {
   struct proc *p;
+  // int index = 0;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
-  for(;;){
+
+  for (;;) {
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
 
+#ifdef DEFAULT
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+      if (p->state != RUNNABLE)
+        continue;
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
-
+      /*
+        Save current registers in cpu->scheduler which
+        points to a struct context.
+        Load registers from process's context(p->context)
+
+        struct context{
+          uint edi;
+          uint esi;
+          uint ebx;
+          uint ebp;
+          uint eip;
+        }
+      */
       swtch(&(c->scheduler), p->context);
       switchkvm();
 
@@ -350,6 +472,66 @@ scheduler(void)
       // It should have changed its p->state before coming back.
       c->proc = 0;
     }
+#else
+
+#ifdef FCFS
+    struct proc *minP = NULL;
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+      if (p->state == RUNNABLE) {
+        if (minP != NULL) {
+          if (p->ctime < minP->ctime)
+            minP = p;
+        }
+        else
+          minP = p;
+      }
+    }
+    if (minP != NULL) {
+      p = minP;//the process with the smallest creation time
+      proc = p;
+      switchuvm(p);
+      p->state = RUNNING;
+      swtch(&cpu->scheduler, proc->context);
+      switchkvm();
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      proc = 0;
+    }
+#else
+
+#ifdef SML
+    uint priority = 3;
+    p = findreadyprocess(&index, &priority);
+    if (p == 0) {
+      release(&ptable.lock);
+      continue;
+    }
+    proc = p;
+    switchuvm(p);
+    p->state = RUNNING;
+    swtch(&cpu->scheduler, proc->context);
+    switchkvm();
+    proc = 0;
+#else
+#ifdef DML
+    uint priority = 3;
+    p = findreadyprocess(&index, &priority);
+    if (p == 0) {
+      release(&ptable.lock);
+      continue;
+    }
+    proc = p;
+    switchuvm(p);
+    p->state = RUNNING;
+    p->tickcounter = 0;
+    swtch(&cpu->scheduler, proc->context);
+    switchkvm();
+    proc = 0;
+#endif
+#endif
+#endif
+#endif
+
     release(&ptable.lock);
 
   }
@@ -368,13 +550,13 @@ sched(void)
   int intena;
   struct proc *p = myproc();
 
-  if(!holding(&ptable.lock))
+  if (!holding(&ptable.lock))
     panic("sched ptable.lock");
-  if(mycpu()->ncli != 1)
+  if (mycpu()->ncli != 1)
     panic("sched locks");
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
     panic("sched running");
-  if(readeflags()&FL_IF)
+  if (readeflags()&FL_IF)
     panic("sched interruptible");
   intena = mycpu()->intena;
   swtch(&p->context, mycpu()->scheduler);
@@ -418,11 +600,11 @@ void
 sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
-  if(p == 0)
+
+  if (p == 0)
     panic("sleep");
 
-  if(lk == 0)
+  if (lk == 0)
     panic("sleep without lk");
 
   // Must acquire ptable.lock in order to
@@ -431,7 +613,7 @@ sleep(void *chan, struct spinlock *lk)
   // guaranteed that we won't miss any wakeup
   // (wakeup runs with ptable.lock locked),
   // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
+  if (lk != &ptable.lock) { //DOC: sleeplock0
     acquire(&ptable.lock);  //DOC: sleeplock1
     release(lk);
   }
@@ -445,7 +627,7 @@ sleep(void *chan, struct spinlock *lk)
   p->chan = 0;
 
   // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
+  if (lk != &ptable.lock) { //DOC: sleeplock2
     release(&ptable.lock);
     acquire(lk);
   }
@@ -459,9 +641,14 @@ wakeup1(void *chan)
 {
   struct proc *p;
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == SLEEPING && p->chan == chan) {
       p->state = RUNNABLE;
+#ifdef DML
+      p->priority = 3; // relevant for DML - process waited for I\O, and now it's ready to run again
+#endif
+    }
+
 }
 
 // Wake up all processes sleeping on chan.
@@ -482,11 +669,11 @@ kill(int pid)
   struct proc *p;
 
   acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->pid == pid){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+    if (p->pid == pid) {
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
+      if (p->state == SLEEPING)
         p->state = RUNNABLE;
       release(&ptable.lock);
       return 0;
@@ -504,31 +691,83 @@ void
 procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [EMBRYO]    "embryo",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
+    [UNUSED]    "unused",
+    [EMBRYO]    "embryo",
+    [SLEEPING]  "sleep ",
+    [RUNNABLE]  "runble",
+    [RUNNING]   "run   ",
+    [ZOMBIE]    "zombie"
   };
   int i;
   struct proc *p;
   char *state;
   uint pc[10];
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+    if (p->state == UNUSED)
       continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
     cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
+    if (p->state == SLEEPING) {
+      getcallerpcs((uint*)p->context->ebp + 2, pc);
+      for (i = 0; i < 10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
   }
 }
+
+
+
+/*
+  ass1:task2 this method will run every clock tick and update the statistic fields for each proc
+*/
+void updatestatistics() {
+  struct proc *p;
+  acquire(&ptable.lock);
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+    switch (p->state) {
+    case SLEEPING:
+      p->stime++;
+      break;
+    case RUNNABLE:
+      p->retime++;
+      break;
+    case RUNNING:
+      p->rutime++;
+      break;
+    default:
+      ;
+    }
+  }
+  release(&ptable.lock);
+}
+
+int set_prio(int priority) {
+  if (priority < 1 || priority > 3)
+    return -1;
+  acquire(&ptable.lock);
+  struct proc *proc = myproc();
+  proc->priority = priority;
+  release(&ptable.lock);
+  return 0;
+}
+
+void decpriority(void) {
+  struct proc *proc = myproc();
+  // acquire(&ptable.lock);
+  proc->priority = proc->priority == 1 ? 1 : proc->priority - 1;
+  // release(&ptable.lock);
+}
+
+int inctickcounter() {
+  int res;
+  struct proc *proc = myproc();
+  acquire(&ptable.lock);
+  res = ++proc->tickcounter;
+  release(&ptable.lock);
+  return res;
+}
diff --git a/proc.h b/proc.h
index 1647114..e3d0071 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,12 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint ctime;                   // Process creation time
+  int stime;                   //process SLEEPING time
+  int retime;                  //process READY(RUNNABLE) time
+  int rutime;                  //process RUNNING time
+  int priority;
+  int tickcounter;
 };
 
 // Process memory is laid out contiguously, low addresses first:
@@ -56,3 +62,4 @@ struct proc {
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+void updatestatistics();
\ No newline at end of file
diff --git a/sanity.c b/sanity.c
new file mode 100644
index 0000000..03bc147
--- /dev/null
+++ b/sanity.c
@@ -0,0 +1,79 @@
+#include "types.h"
+#include "user.h"
+#include "stat.h"
+
+int main(int argc, char *argv[])
+{
+  int i, n, j, k, l;
+  int retime;
+  int rutime;
+  int stime;
+
+  if (argc != 2) {
+    printf(1, "Usage: sanity <n>\n");
+    exit();
+  }
+  int tot_time[3][3];
+  for(i = 0; i < 3; i++)
+    for(j = 0; j < 3; j++)
+      tot_time[i][j] = 0;
+  
+  // retrieve provided input
+  n = atoi(argv[1]);
+  
+  int pid;
+  
+  // fork child process and calculate statistics of process
+  for(i = 0; i < 3*n; i++){
+    pid = fork();
+    if(pid == 0){ // child process
+      j = (getpid() - 4) % 3; // here 4 is the pid of first child we substracted it to ensure independence 
+      if(j == 0){ // CPU bound process
+	for(k = 0; k < 100; k++){
+          for(l = 0; l < 100000; l++){}
+	}
+      }
+      else if(j == 1){ // short task based cpu bound process
+	for(k = 0; k < 100; k++){
+          for(l = 0; l < 100000; l++){}
+	  yield();
+	}
+      }
+      else{
+        for(k = 0; k < 100; k++){
+          sleep(1);
+        }
+      }
+      exit(); // child process terminates here
+    }
+    continue;
+  }
+  
+  for(i = 0; i < 3*n; i++){
+    pid = wait2(&retime, &rutime, &stime);
+    int res_id = (pid-4)%3;
+    tot_time[res_id][0] += retime;
+    tot_time[res_id][1] += rutime;
+    tot_time[res_id][2] += stime;
+    if(res_id == 0){
+      printf(1, "Cpu bound  , pid: %d, ready: %d, running: %d, sleeping: %d, turnaround: %d\n", pid, retime, rutime, stime, retime + rutime + stime);
+    }
+    else if(res_id == 1){
+      printf(1, "S-Cpu bound, pid: %d, ready: %d, running: %d, sleeping: %d, turnaround: %d\n", pid, retime, rutime, stime, retime + rutime + stime);
+    }
+    else{
+      printf(1, "I/O bound  , pid: %d, ready: %d, running: %d, sleeping: %d, turnaround: %d\n", pid, retime, rutime, stime, retime + rutime + stime);
+    }
+  }
+  
+  for(i = 0; i < 3; i++){
+    for(j = 0; j < 3; j++){
+      tot_time[i][j] /= n;
+    }
+  }
+  
+  printf(1, "Cpu bound stats  : \n Average ready time: %d \n Average running time: %d \n Average sleeping time: %d\n Average turnaround time: %d \n",tot_time[0][0], tot_time[0][1], tot_time[0][2],tot_time[0][0] + tot_time[0][1] + tot_time[0][2]);
+  printf(1, "S-Cpu bound stats: \n Average ready time: %d \n Average running time: %d \n Average sleeping time: %d\n Average turnaround time: %d \n",tot_time[1][0], tot_time[1][1], tot_time[1][2],tot_time[1][0] + tot_time[1][1] + tot_time[1][2]); 
+  printf(1, "I/O bound stats  : \n Average ready time: %d \n Average running time: %d \n Average sleeping time: %d\n Average turnaround time: %d \n",tot_time[2][0], tot_time[2][1], tot_time[2][2],tot_time[2][0] + tot_time[2][1] + tot_time[2][2]); 
+  exit(); 
+}
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..4f65a2c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -19,7 +19,7 @@ fetchint(uint addr, int *ip)
 {
   struct proc *curproc = myproc();
 
-  if(addr >= curproc->sz || addr+4 > curproc->sz)
+  if (addr >= curproc->sz || addr + 4 > curproc->sz)
     return -1;
   *ip = *(int*)(addr);
   return 0;
@@ -34,12 +34,12 @@ fetchstr(uint addr, char **pp)
   char *s, *ep;
   struct proc *curproc = myproc();
 
-  if(addr >= curproc->sz)
+  if (addr >= curproc->sz)
     return -1;
   *pp = (char*)addr;
   ep = (char*)curproc->sz;
-  for(s = *pp; s < ep; s++){
-    if(*s == 0)
+  for (s = *pp; s < ep; s++) {
+    if (*s == 0)
       return s - *pp;
   }
   return -1;
@@ -49,7 +49,7 @@ fetchstr(uint addr, char **pp)
 int
 argint(int n, int *ip)
 {
-  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+  return fetchint((myproc()->tf->esp) + 4 + 4 * n, ip);
 }
 
 // Fetch the nth word-sized system call argument as a pointer
@@ -60,10 +60,10 @@ argptr(int n, char **pp, int size)
 {
   int i;
   struct proc *curproc = myproc();
- 
-  if(argint(n, &i) < 0)
+
+  if (argint(n, &i) < 0)
     return -1;
-  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+  if (size < 0 || (uint)i >= curproc->sz || (uint)i + size > curproc->sz)
     return -1;
   *pp = (char*)i;
   return 0;
@@ -77,7 +77,7 @@ int
 argstr(int n, char **pp)
 {
   int addr;
-  if(argint(n, &addr) < 0)
+  if (argint(n, &addr) < 0)
     return -1;
   return fetchstr(addr, pp);
 }
@@ -103,31 +103,41 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_wait2(void);
+extern int sys_set_prio(void);
+extern int sys_yield(void);
+extern int sys_getctime(void);
 
 static int (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+  [SYS_fork]    sys_fork,
+  [SYS_exit]    sys_exit,
+  [SYS_wait]    sys_wait,
+  [SYS_pipe]    sys_pipe,
+  [SYS_read]    sys_read,
+  [SYS_kill]    sys_kill,
+  [SYS_exec]    sys_exec,
+  [SYS_fstat]   sys_fstat,
+  [SYS_chdir]   sys_chdir,
+  [SYS_dup]     sys_dup,
+  [SYS_getpid]  sys_getpid,
+  [SYS_sbrk]    sys_sbrk,
+  [SYS_sleep]   sys_sleep,
+  [SYS_uptime]  sys_uptime,
+  [SYS_open]    sys_open,
+  [SYS_write]   sys_write,
+  [SYS_mknod]   sys_mknod,
+  [SYS_unlink]  sys_unlink,
+  [SYS_link]    sys_link,
+  [SYS_mkdir]   sys_mkdir,
+  [SYS_close]   sys_close,
+  [SYS_wait2]   sys_wait2,
+  [SYS_set_prio] sys_set_prio,
+  [SYS_yield]   sys_yield,
+  [SYS_getctime] sys_getctime,
 };
 
+
+
 void
 syscall(void)
 {
@@ -135,7 +145,7 @@ syscall(void)
   struct proc *curproc = myproc();
 
   num = curproc->tf->eax;
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+  if (num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     curproc->tf->eax = syscalls[num]();
   } else {
     cprintf("%d %s: unknown sys call %d\n",
diff --git a/syscall.h b/syscall.h
index bc5f356..e3b27b6 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_wait2  22
+#define SYS_set_prio 23
+#define SYS_yield  24
+#define SYS_getctime 25
diff --git a/sysproc.c b/sysproc.c
index 0686d29..33c464d 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -26,12 +26,28 @@ sys_wait(void)
   return wait();
 }
 
+/*
+  this is the actual function being called from syscall.c
+  @returns - pidof the terminated child process ‐ if successful
+­             -1, upon failure
+*/
+int sys_wait2(void) {
+  int *retime, *rutime, *stime;
+  if (argptr(0, (void*)&retime, sizeof(retime)) < 0)
+    return -1;
+  if (argptr(1, (void*)&rutime, sizeof(retime)) < 0)
+    return -1;
+  if (argptr(2, (void*)&stime, sizeof(stime)) < 0)
+    return -1;
+  return wait2(retime, rutime, stime);
+}
+
 int
 sys_kill(void)
 {
   int pid;
 
-  if(argint(0, &pid) < 0)
+  if (argint(0, &pid) < 0)
     return -1;
   return kill(pid);
 }
@@ -48,10 +64,10 @@ sys_sbrk(void)
   int addr;
   int n;
 
-  if(argint(0, &n) < 0)
+  if (argint(0, &n) < 0)
     return -1;
   addr = myproc()->sz;
-  if(growproc(n) < 0)
+  if (growproc(n) < 0)
     return -1;
   return addr;
 }
@@ -62,12 +78,12 @@ sys_sleep(void)
   int n;
   uint ticks0;
 
-  if(argint(0, &n) < 0)
+  if (argint(0, &n) < 0)
     return -1;
   acquire(&tickslock);
   ticks0 = ticks;
-  while(ticks - ticks0 < n){
-    if(myproc()->killed){
+  while (ticks - ticks0 < n) {
+    if (myproc()->killed) {
       release(&tickslock);
       return -1;
     }
@@ -89,3 +105,20 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int sys_set_prio(void) {
+  int priority;
+  argint(0, &priority);
+  return set_prio(priority);
+}
+
+int sys_yield(void) {
+  yield();
+  return 0;
+}
+
+int
+sys_getctime(void)
+{
+  return myproc()->ctime;
+}
diff --git a/trap.c b/trap.c
index 41c66eb..1142356 100644
--- a/trap.c
+++ b/trap.c
@@ -13,15 +13,18 @@ struct gatedesc idt[256];
 extern uint vectors[];  // in vectors.S: array of 256 entry pointers
 struct spinlock tickslock;
 uint ticks;
+extern int inctickcounter(void);
+extern void decpriority(void);
+
 
 void
 tvinit(void)
 {
   int i;
 
-  for(i = 0; i < 256; i++)
-    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+  for (i = 0; i < 256; i++)
+    SETGATE(idt[i], 0, SEG_KCODE << 3, vectors[i], 0);
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE << 3, vectors[T_SYSCALL], DPL_USER);
 
   initlock(&tickslock, "time");
 }
@@ -36,27 +39,32 @@ idtinit(void)
 void
 trap(struct trapframe *tf)
 {
-  if(tf->trapno == T_SYSCALL){
-    if(myproc()->killed)
+  if (tf->trapno == T_SYSCALL) {
+    if (myproc()->killed)
       exit();
     myproc()->tf = tf;
     syscall();
-    if(myproc()->killed)
+    if (myproc()->killed)
       exit();
     return;
   }
 
-  switch(tf->trapno){
+  switch (tf->trapno) {
   case T_IRQ0 + IRQ_TIMER:
-    if(cpuid() == 0){
+    if (cpuid() == 0) {
       acquire(&tickslock);
       ticks++;
+      updatestatistics(); //will update proc statistic every clock tick
       wakeup(&ticks);
       release(&tickslock);
     }
     lapiceoi();
     break;
   case T_IRQ0 + IRQ_IDE:
+#ifdef FCFS
+#else
+    // resettickscycle();
+#endif
     ideintr();
     lapiceoi();
     break;
@@ -64,10 +72,18 @@ trap(struct trapframe *tf)
     // Bochs generates spurious IDE1 interrupts.
     break;
   case T_IRQ0 + IRQ_KBD:
+#ifdef FCFS
+#else
+    // resettickscycle();
+#endif
     kbdintr();
     lapiceoi();
     break;
   case T_IRQ0 + IRQ_COM1:
+#ifdef FCFS
+#else
+    // resettickscycle();
+#endif
     uartintr();
     lapiceoi();
     break;
@@ -80,7 +96,7 @@ trap(struct trapframe *tf)
 
   //PAGEBREAK: 13
   default:
-    if(myproc() == 0 || (tf->cs&3) == 0){
+    if (myproc() == 0 || (tf->cs & 3) == 0) {
       // In kernel, it must be our mistake.
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
               tf->trapno, cpuid(), tf->eip, rcr2());
@@ -97,16 +113,28 @@ trap(struct trapframe *tf)
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+  if (myproc() && myproc()->killed && (tf->cs & 3) == DPL_USER)
     exit();
 
+#ifdef FCFS
+// do not yield
+#else
+#ifdef DML
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
+  if (myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0 + IRQ_TIMER && inctickcounter() == QUANTA) {
+    decpriority();
     yield();
-
+  }
+#else
+  // Force process to give up CPU on clock tick.
+  // If interrupts were on while locks held, would need to check nlock.
+  if (myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0 + IRQ_TIMER && inctickcounter() == QUANTA) {
+    yield();
+  }
+#endif
+#endif
   // Check if the process has been killed since we yielded
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+  if (myproc() && myproc()->killed && (tf->cs & 3) == DPL_USER)
     exit();
 }
diff --git a/traps.h b/traps.h
index 0bd1fd8..7c09bd3 100644
--- a/traps.h
+++ b/traps.h
@@ -1,5 +1,5 @@
 // x86 trap and interrupt constants.
-
+//traps - interrupt due to exceptions
 // Processor-defined:
 #define T_DIVIDE         0      // divide error
 #define T_DEBUG          1      // debug exception
diff --git a/user.h b/user.h
index 4f99c52..42d60ed 100644
--- a/user.h
+++ b/user.h
@@ -1,3 +1,6 @@
+// A header file is a file containing C declarations and macro definitions (see Macros) to be shared between
+// several source files.
+// You request the use of a header file in your program by including it, with the C preprocessing directive '#include'
 struct stat;
 struct rtcdate;
 
@@ -23,6 +26,13 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int wait2(int*, int*, int*);
+#ifdef SML
+int set_prio(int);
+#endif
+int yield(void);
+int getctime(void);
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..ff3eafd 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,7 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(wait2)
+SYSCALL(set_prio)
+SYSCALL(yield)
+SYSCALL(getctime)
\ No newline at end of file
